"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const telefram_service_1 = __importDefault(require("../servises/telefram-service"));
const mongo_service_1 = __importDefault(require("../servises/mongo-service"));
const puppeteer_service_1 = __importDefault(require("../servises/puppeteer-service"));
const pixelmatch_service_1 = __importDefault(require("../servises/pixelmatch-service"));
class BotController {
    constructor() {
        this.setCommands();
    }
    setCommands() {
        return __awaiter(this, void 0, void 0, function* () {
            telefram_service_1.default.setMyCommands([
                { command: "/legend", description: "‚ÑπÔ∏è –õ–µ–≥–µ–Ω–¥–∞" },
                { command: "/subscribe", description: "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
                { command: "/unsubscribe", description: "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
                { command: "/mute", description: "üîá –ë–µ–∑ –∑–≤—É–∫—É" },
                { command: "/unmute", description: "üîà –ó—ñ –∑–≤—É–∫–æ–º" },
                { command: "/help", description: "üìÑ –î–æ–ø–æ–º–æ–≥–∞" },
            ]);
        });
    }
    setReplyKeyboard(chat) {
        const { subscribed, silent } = chat;
        const keyboard = [];
        keyboard.push([
            {
                text: "‚ÑπÔ∏è –õ–µ–≥–µ–Ω–¥–∞",
            },
        ], [
            {
                text: subscribed ? "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" : "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
            },
            {
                text: silent ? "üîà –ó—ñ –∑–≤—É–∫–æ–º" : "üîá –ë–µ–∑ –∑–≤—É–∫—É",
            },
        ]);
        return {
            reply_markup: {
                resize_keyboard: true,
                keyboard,
            },
        };
    }
    sendError(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield telefram_service_1.default.sendMessage(chatId, `–ü–æ–º–∏–ª–æ—á–∫–∞  ¬Ø\\_(„ÉÑ)_/¬Ø`);
        });
    }
    onHelp(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield telefram_service_1.default.sendMessage(chatId, `–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–æ–≤—É –º–∞–ø—É, –∫–æ–ª–∏ –Ω–∞ –Ω—ñ–π –±—É–¥—É—Ç—å –∑–º—ñ–Ω–∏.\n\n–û—Å—å —â–æ –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏ –∑—Ä–æ–±–∏—Ç–∏:\n\n/legend - ‚ÑπÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ª–µ–≥–µ–Ω–¥—É –º–∞–ø—ã.\n\n/unsubscribe - üîï *–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è* –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å –º–∞–ø–∏.\n/subscribe - üîî *–≤—ñ–¥–Ω–æ–≤–∏—Ç–∏* –ø—ñ–¥–ø–∏—Å–∫—É.\n\n/mute - üîá –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è *–±–µ–∑ –∑–≤—É–∫—É*.\n/unmute - üîà —Ç–∞ *–∑—ñ –∑–≤—É–∫–æ–º*.`);
        });
    }
    getAlertsScreenshot() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = "https://alerts.in.ua/";
            const selector = ".alert-map.map-container.no-select>svg>g[fill='none']";
            return yield puppeteer_service_1.default.getSelectorScreenshot(url, selector, () => {
                localStorage.setItem("darkMode", "true");
                localStorage.setItem("showDurationGradient", "true");
                localStorage.setItem("showOblastLabels", "true");
            });
        });
    }
    onStart(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, from, } = msg;
            this.setCommands();
            try {
                const chat = yield mongo_service_1.default.addChat(chatId, from);
                yield telefram_service_1.default.sendMessage(chatId, `–í—ñ—Ç–∞—é, –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω—è –º–∞–ø–∏ —Ç—Ä–∏–≤–æ–≥ –£–∫—Ä–∞—ó–Ω–∏ (https://alerts.in.ua/).\n–¶–µ–π –±–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –∑–º—ñ–Ω–∏ –Ω–∞ –º–∞–ø—ñ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥ —ñ –Ω–∞–¥—Å–∏–ª–∞—î —ó—ó, —è–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏–ª–æ—Å—å.\n–û—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—î –º–∞–ø–∞ –∑–∞—Ä–∞–∑:`, Object.assign(Object.assign({}, this.setReplyKeyboard(chat)), { disable_web_page_preview: true }));
                yield telefram_service_1.default.sendPhoto(chatId, fs_1.default.readFileSync("base.png"), {}, {
                    filename: "mapScreenshot",
                    contentType: "image/png",
                });
                return;
            }
            catch (e) {
                try {
                    yield this.setCommands();
                    let chat = yield mongo_service_1.default.getChat(chatId);
                    const { subscribed } = chat;
                    if (subscribed) {
                        yield telefram_service_1.default.sendMessage(chatId, `–í—ñ—Ç–∞—é, –æ—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—î –º–∞–ø–∞ –∑–∞—Ä–∞–∑:`, this.setReplyKeyboard(chat));
                    }
                    else {
                        chat = yield mongo_service_1.default.chatSubscribe(chatId, true);
                        yield telefram_service_1.default.sendMessage(chatId, `–í–∏ –∑–Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ç—Ä–∏–≤–æ–∂–Ω—É –º–∞–ø—É. –ê –æ—Å—å —ñ –≤–æ–Ω–∞ –∑–∞—Ä–∞–∑:`, this.setReplyKeyboard(chat));
                    }
                    yield telefram_service_1.default.sendPhoto(chatId, fs_1.default.readFileSync("base.png"), {}, {
                        filename: "mapScreenshot",
                        contentType: "image/png",
                    });
                }
                catch (e) {
                    yield this.sendError(chatId);
                }
            }
        });
    }
    onLegend(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            const legend = fs_1.default.readFileSync("legend.png");
            return yield telefram_service_1.default.sendPhoto(chatId, legend, {}, {
                filename: "mapLegend",
                contentType: "image/png",
            });
        });
    }
    onSubscribe(msg, subscribe) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            try {
                let chat = yield mongo_service_1.default.getChat(chatId);
                if (chat.subscribed === subscribe) {
                    return yield telefram_service_1.default.sendMessage(chatId, subscribe
                        ? "üîî –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è."
                        : "üîï –í–∏ –≤–∂–µ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å", this.setReplyKeyboard(chat));
                }
                chat = yield mongo_service_1.default.chatSubscribe(chatId, subscribe);
                yield telefram_service_1.default.sendMessage(chatId, subscribe
                    ? "üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è."
                    : `üîï –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å. –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤ "–ú–µ–Ω—é", –∞–ª–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å.`, this.setReplyKeyboard(chat));
                return;
            }
            catch (e) {
                yield this.sendError(chatId);
            }
        });
    }
    onMute(msg, mute) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            try {
                let chat = yield mongo_service_1.default.getChat(chatId);
                if (chat.silent === mute) {
                    return yield telefram_service_1.default.sendMessage(chatId, mute
                        ? "üîá –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±–µ–∑ –∑–≤—É–∫—É"
                        : "üîà –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –∑—ñ –∑–≤—É–∫–æ–º", this.setReplyKeyboard(chat));
                }
                chat = yield mongo_service_1.default.chatSilent(chatId, mute);
                yield telefram_service_1.default.sendMessage(chatId, mute
                    ? "üîá –í–∞—à—ñ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –±–µ–∑ –∑–≤—É–∫—É."
                    : "üîà –í–∞—à—ñ –ø–µ—Ä–¥–±–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º.", this.setReplyKeyboard(chat));
                return;
            }
            catch (e) {
                yield this.sendError(chatId);
            }
        });
    }
    onAction(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            let { text, chat: { id: chatId }, } = msg;
            try {
                yield mongo_service_1.default.connect();
                switch (text) {
                    //start bot
                    case "/start":
                        yield this.onStart(msg);
                        return;
                    //show legend
                    case "/legend":
                    case "‚ÑπÔ∏è –õ–µ–≥–µ–Ω–¥–∞":
                        yield this.onLegend(msg);
                        return;
                    //subscribe
                    case "/subscribe":
                    case "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è":
                        yield this.onSubscribe(msg, true);
                        return;
                    //unsubscribe
                    case "/unsubscribe":
                    case "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è":
                        yield this.onSubscribe(msg, false);
                        return;
                    //mute
                    case "/mute":
                    case "üîá –ë–µ–∑ –∑–≤—É–∫—É":
                        yield this.onMute(msg, true);
                        return;
                    //unmute
                    case "/unmute":
                    case "üîà –ó—ñ –∑–≤—É–∫–æ–º":
                        yield this.onMute(msg, false);
                        return;
                    default:
                        //help
                        yield this.onHelp(chatId);
                        return;
                }
            }
            catch (e) {
                this.sendError(chatId);
            }
        });
    }
    monitor() {
        return __awaiter(this, void 0, void 0, function* () {
            const newScreenshot = (yield this.getAlertsScreenshot());
            if (newScreenshot) {
                const diffPixels = yield pixelmatch_service_1.default.diffImages(fs_1.default.readFileSync("base.png"), newScreenshot);
                console.log(`${diffPixels} pixels; ${new Date().toLocaleString()}`);
                if (diffPixels > 400) {
                    fs_1.default.writeFileSync("base.png", newScreenshot);
                    try {
                        yield mongo_service_1.default.connect();
                        try {
                            const chats = yield mongo_service_1.default.getChats({
                                subscribed: true,
                            });
                            if (!chats.length) {
                                return;
                            }
                            yield Promise.all(chats.map(({ id, silent }) => __awaiter(this, void 0, void 0, function* () {
                                return yield telefram_service_1.default.sendPhoto(id, newScreenshot, {
                                    disable_notification: silent,
                                }, {
                                    filename: "mapScreenshot",
                                    contentType: "image/png",
                                });
                            })));
                        }
                        catch (e) { }
                    }
                    catch (e) { }
                }
            }
        });
    }
}
exports.default = new BotController();
