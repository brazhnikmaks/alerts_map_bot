"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const telefram_service_1 = __importDefault(require("../servises/telefram-service"));
const mongo_service_1 = __importDefault(require("../servises/mongo-service"));
const puppeteer_service_1 = __importDefault(require("../servises/puppeteer-service"));
const pixelmatch_service_1 = __importDefault(require("../servises/pixelmatch-service"));
const alerts_color_service_1 = __importDefault(require("../servises/alerts-color-service"));
class BotController {
    constructor() {
        this.setCommands();
    }
    setCommands() {
        return __awaiter(this, void 0, void 0, function* () {
            telefram_service_1.default.setMyCommands([
                { command: "/legend", description: "‚ÑπÔ∏è –õ–µ–≥–µ–Ω–¥–∞" },
                { command: "/air", description: "‚úà –¢—ñ–ª—å–∫–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏" },
                { command: "/all", description: "‚ö†Ô∏è –í—Å—ñ –≤–∏–¥–∏ —Ç—Ä–∏–≤–æ–≥" },
                { command: "/subscribe", description: "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
                { command: "/unsubscribe", description: "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
                { command: "/mute", description: "üîá –ë–µ–∑ –∑–≤—É–∫—É" },
                { command: "/unmute", description: "üîà –ó—ñ –∑–≤—É–∫–æ–º" },
                { command: "/help", description: "üìÑ –î–æ–ø–æ–º–æ–≥–∞" },
            ]);
        });
    }
    setReplyKeyboard(chat) {
        const { subscribed, silent, alerts } = chat;
        const keyboard = [];
        keyboard.push([
            {
                text: "‚ÑπÔ∏è",
            },
            {
                text: subscribed ? "üîï" : "üîî",
            },
            {
                text: silent ? "üîà" : "üîá",
            },
            {
                text: alerts === "air" ? "‚ö†Ô∏è" : "‚úà",
            },
        ]);
        return {
            reply_markup: {
                resize_keyboard: true,
                keyboard,
            },
        };
    }
    sendError(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield telefram_service_1.default.sendMessage(chatId, `–ü–æ–º–∏–ª–æ—á–∫–∞  ¬Ø\\_(„ÉÑ)_/¬Ø`);
        });
    }
    onHelp(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield telefram_service_1.default.sendMessage(chatId, `–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–æ–≤—É –º–∞–ø—É, –∫–æ–ª–∏ –Ω–∞ –Ω—ñ–π –±—É–¥—É—Ç—å –∑–º—ñ–Ω–∏.\n\n–û—Å—å, —â–æ –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏ –∑—Ä–æ–±–∏—Ç–∏:\n\n/legend - ‚ÑπÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ª–µ–≥–µ–Ω–¥—É –º–∞–ø—ã.\n\n/air - ‚úà –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ *–ø–æ–≤—ñ—Ç—Ä—è–Ω–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏*.\n/all - ‚ö†Ô∏è –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ (–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞, –∞—Ä—Ç–∏–ª–µ—Ä—ñ—è —Ç–∞ —ñ–Ω—à–µ).\n\n/unsubscribe - üîï *–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è* –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å –º–∞–ø–∏.\n/subscribe - üîî *–≤—ñ–¥–Ω–æ–≤–∏—Ç–∏* –ø—ñ–¥–ø–∏—Å–∫—É.\n\n/mute - üîá –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è *–±–µ–∑ –∑–≤—É–∫—É*.\n/unmute - üîà —Ç–∞ *–∑—ñ –∑–≤—É–∫–æ–º*.`, {
                parse_mode: "Markdown",
            });
        });
    }
    getAlertsScreenshot() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = "https://alerts.in.ua/";
            const selector = ".alert-map.map-container.no-select>svg>g[fill='none']";
            return yield puppeteer_service_1.default.getSelectorScreenshot(url, selector, () => {
                localStorage.setItem("darkMode", "true");
                localStorage.setItem("showDurationGradient", "false");
                localStorage.setItem("showOblastLabels", "true");
                localStorage.setItem("offlineWarning", "false");
                localStorage.setItem("showRaion", "null");
            });
        });
    }
    onStart(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, from, } = msg;
            this.setCommands();
            try {
                const chat = yield mongo_service_1.default.addChat(chatId, from);
                yield telefram_service_1.default.sendMessage(chatId, `–í—ñ—Ç–∞—é, –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω—è –º–∞–ø–∏ —Ç—Ä–∏–≤–æ–≥ –£–∫—Ä–∞—ó–Ω–∏ (https://alerts.in.ua/).\n\n–¶–µ–π –±–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –∑–º—ñ–Ω–∏ –Ω–∞ –º–∞–ø—ñ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —ó—ó, —è–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏–ª–æ—Å—å.\n\n–ö—Ä–∞—â–µ –≤–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å 1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å. (–Ω–∞–≤—ñ—â–æ –í–∞–º –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –º–∞–ø–∏)\n\n–û—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—î –º–∞–ø–∞ –∑–∞—Ä–∞–∑:`, Object.assign(Object.assign({}, this.setReplyKeyboard(chat)), { disable_web_page_preview: true }));
                yield telefram_service_1.default.sendPhoto(chatId, fs_1.default.readFileSync("base.png"), {}, {
                    filename: "mapScreenshot",
                    contentType: "image/png",
                });
                return;
            }
            catch (e) {
                try {
                    yield this.setCommands();
                    let chat = yield mongo_service_1.default.getChat(chatId);
                    const { subscribed } = chat;
                    if (subscribed) {
                        yield telefram_service_1.default.sendMessage(chatId, `–í—ñ—Ç–∞—é, –æ—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—î –º–∞–ø–∞ –∑–∞—Ä–∞–∑:`, this.setReplyKeyboard(chat));
                    }
                    else {
                        chat = yield mongo_service_1.default.chatSubscribe(chatId, true);
                        yield telefram_service_1.default.sendMessage(chatId, `–í–∏ –∑–Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ç—Ä–∏–≤–æ–∂–Ω—É –º–∞–ø—É. –ê –æ—Å—å —ñ –≤–æ–Ω–∞ –∑–∞—Ä–∞–∑:`, this.setReplyKeyboard(chat));
                    }
                    yield telefram_service_1.default.sendPhoto(chatId, fs_1.default.readFileSync("base.png"), {}, {
                        filename: "mapScreenshot",
                        contentType: "image/png",
                    });
                }
                catch (e) {
                    yield this.sendError(chatId);
                }
            }
        });
    }
    onLegend(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            const legend = fs_1.default.readFileSync("legend.jpeg");
            return yield telefram_service_1.default.sendPhoto(chatId, legend, {}, {
                filename: "mapLegend",
                contentType: "image/jpeg",
            });
        });
    }
    onSubscribe(msg, subscribe) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            try {
                let chat = yield mongo_service_1.default.getChat(chatId);
                if (chat.subscribed === subscribe) {
                    return yield telefram_service_1.default.sendMessage(chatId, subscribe
                        ? "üîî –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏."
                        : "üîï –í–∏ –≤–∂–µ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å", this.setReplyKeyboard(chat));
                }
                chat = yield mongo_service_1.default.chatSubscribe(chatId, subscribe);
                yield telefram_service_1.default.sendMessage(chatId, subscribe
                    ? "üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏.\n–û—Å—å –≤–æ–Ω–∞ –∑–∞—Ä–∞–∑:"
                    : `üîï –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å.`, this.setReplyKeyboard(chat));
                if (subscribe) {
                    yield telefram_service_1.default.sendPhoto(chatId, fs_1.default.readFileSync("base.png"), {}, {
                        filename: "mapScreenshot",
                        contentType: "image/png",
                    });
                }
                return;
            }
            catch (e) {
                yield this.sendError(chatId);
            }
        });
    }
    onMute(msg, mute) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            try {
                let chat = yield mongo_service_1.default.getChat(chatId);
                if (chat.silent === mute) {
                    return yield telefram_service_1.default.sendMessage(chatId, mute
                        ? "üîá –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∑ –∑–≤—É–∫—É"
                        : "üîà –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑—ñ –∑–≤—É–∫–æ–º", this.setReplyKeyboard(chat));
                }
                chat = yield mongo_service_1.default.chatSilent(chatId, mute);
                yield telefram_service_1.default.sendMessage(chatId, mute
                    ? "üîá –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –±–µ–∑ –∑–≤—É–∫—É."
                    : "üîà –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º.", this.setReplyKeyboard(chat));
                return;
            }
            catch (e) {
                yield this.sendError(chatId);
            }
        });
    }
    onAirAlert(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            try {
                let chat = yield mongo_service_1.default.getChat(chatId);
                if (chat.alerts === "air") {
                    return yield telefram_service_1.default.sendMessage(chatId, "‚úà –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ (—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä).", this.setReplyKeyboard(chat));
                }
                chat = yield mongo_service_1.default.chatAlerts(chatId, "air");
                yield telefram_service_1.default.sendMessage(chatId, "‚úà –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–º—ñ–Ω–∏—Ç—å—Å—è –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ (—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä).", this.setReplyKeyboard(chat));
                return;
            }
            catch (e) {
                yield this.sendError(chatId);
            }
        });
    }
    onAllAlert(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            const { chat: { id: chatId }, } = msg;
            try {
                let chat = yield mongo_service_1.default.getChat(chatId);
                if (chat.alerts === "all") {
                    return yield telefram_service_1.default.sendMessage(chatId, "‚ö†Ô∏è –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ –Ω–∞ –±—É–¥—å-—è–∫—É –∑–º—ñ–Ω—É —Ç—Ä–∏–≤–æ–≥.", this.setReplyKeyboard(chat));
                }
                chat = yield mongo_service_1.default.chatAlerts(chatId, "all");
                yield telefram_service_1.default.sendMessage(chatId, "‚ö†Ô∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –ø—Ä–∏ –±—É–¥—å-—è–∫—ñ–π –∑–º—ñ–Ω—ñ —Ç—Ä–∏–≤–æ–≥.", this.setReplyKeyboard(chat));
                return;
            }
            catch (e) {
                yield this.sendError(chatId);
            }
        });
    }
    onAction(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            let { text, chat: { id: chatId }, } = msg;
            try {
                yield mongo_service_1.default.connect();
                switch (text) {
                    //start bot
                    case "/start":
                        yield this.onStart(msg);
                        return;
                    //show legend
                    case "/legend":
                    case "‚ÑπÔ∏è":
                        yield this.onLegend(msg);
                        return;
                    //show all alerts
                    case "/all":
                    case "‚ö†Ô∏è":
                        yield this.onAllAlert(msg);
                        return;
                    //show only air alert
                    case "/air":
                    case "‚úà":
                        yield this.onAirAlert(msg);
                        return;
                    //subscribe
                    case "/subscribe":
                    case "üîî":
                        yield this.onSubscribe(msg, true);
                        return;
                    //unsubscribe
                    case "/unsubscribe":
                    case "üîï":
                        yield this.onSubscribe(msg, false);
                        return;
                    //mute
                    case "/mute":
                    case "üîá":
                        yield this.onMute(msg, true);
                        return;
                    //unmute
                    case "/unmute":
                    case "üîà":
                        yield this.onMute(msg, false);
                        return;
                    default:
                        //help
                        yield this.onHelp(chatId);
                        return;
                }
            }
            catch (e) {
                this.sendError(chatId);
            }
        });
    }
    monitor() {
        return __awaiter(this, void 0, void 0, function* () {
            const newScreenshot = (yield this.getAlertsScreenshot());
            let airAlertMatch = false;
            if (newScreenshot) {
                const base = fs_1.default.readFileSync("base.png");
                const diffPixels = yield pixelmatch_service_1.default.diffImages(base, newScreenshot, {
                    threshold: 0.1,
                    // @ts-ignore
                    onDiffPixel: (color1, color2) => {
                        if (!airAlertMatch) {
                            airAlertMatch = alerts_color_service_1.default.isAirAlert(color1, color2);
                        }
                    },
                });
                if (diffPixels > 400) {
                    // catch not alert screenshots
                    if (!airAlertMatch) {
                        const dateNow = Date.now();
                        fs_1.default.writeFileSync(`base-before-${dateNow}.png`, base);
                        fs_1.default.writeFileSync(`base-after-${dateNow}.png`, newScreenshot);
                    }
                    fs_1.default.writeFileSync("base.png", newScreenshot);
                    try {
                        yield mongo_service_1.default.connect();
                        try {
                            const chats = yield mongo_service_1.default.getChats(Object.assign({ subscribed: true }, (airAlertMatch ? {} : { alerts: "all" })));
                            if (!chats.length) {
                                return;
                            }
                            yield Promise.all(chats.map((chat) => __awaiter(this, void 0, void 0, function* () {
                                const { id, silent } = chat;
                                try {
                                    yield telefram_service_1.default.sendPhoto(id, newScreenshot, Object.assign(Object.assign({}, this.setReplyKeyboard(chat)), { disable_notification: silent }), {
                                        filename: "mapScreenshot",
                                        contentType: "image/png",
                                    });
                                    return;
                                }
                                catch (e) {
                                    // @ts-ignore
                                    if (e.response.body.error_code === 403) {
                                        yield mongo_service_1.default.chatSubscribe(id, false);
                                    }
                                    return;
                                }
                            })));
                            console.log((airAlertMatch
                                ? "–∑–º—ñ–Ω–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏"
                                : "–∑–º—ñ–Ω–∞ —ñ–Ω—à–∏—Ö —Ç—Ä–∏–≤–æ–≥") +
                                " " +
                                new Date(Date.now() + 120 * 60 * 1000).toLocaleString());
                        }
                        catch (e) { }
                    }
                    catch (e) { }
                }
            }
        });
    }
    updateMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield mongo_service_1.default.connect();
                try {
                    const chats = yield mongo_service_1.default.getChats({
                        subscribed: true,
                    });
                    if (!chats.length) {
                        return;
                    }
                    yield Promise.all(chats.map((chat) => __awaiter(this, void 0, void 0, function* () {
                        const { id, silent } = chat;
                        try {
                            yield telefram_service_1.default.sendMessage(id, "–û–Ω–æ–≤–ª–µ–Ω–Ω—è:\n\n–ë–æ—Ç –Ω–∞–≤—á–∏–≤—Å—è –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É (—á–µ—Ä–≤–æ–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É) –≤—ñ–¥ —ñ–Ω—à–∏—Ö.\n\n–¢–µ–ø–µ—Ä –¥–æ–¥–∞—Ç–∫–æ–≤–æ –í–∏ –º–æ–∂–µ—Ç–µ:\n\n/air - ‚úà –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ *–ø–æ–≤—ñ—Ç—Ä—è–Ω–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏*.\n/all - ‚ö†Ô∏è –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ (–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞, –∞—Ä—Ç–∏–ª–µ—Ä—ñ—è —Ç–∞ —ñ–Ω—à–µ). - –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –í–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏, –±–æ—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å, —è–∫—â–æ –∑–º—ñ–Ω–∏—Ç—å—Å—è –∑–∞–≥—Ä–æ–∑–∞ –∞—Ä—Ç–æ–±—Å—Ç—Ä—ñ–ª—É.", Object.assign(Object.assign({}, this.setReplyKeyboard(chat)), { parse_mode: "Markdown" }));
                            return;
                        }
                        catch (e) { }
                    })));
                }
                catch (e) { }
            }
            catch (e) { }
        });
    }
}
exports.default = new BotController();
