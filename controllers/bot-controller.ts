import fs from "fs";
import {
  Message,
  SendMessageOptions,
  KeyboardButton,
} from "node-telegram-bot-api";
import bot from "../servises/telefram-service";
import db from "../servises/mongo-service";
import PuppeteerService from "../servises/puppeteer-service";
import PixelmatchService from "../servises/pixelmatch-service";
import AlertsColorService from "../servises/alerts-color-service";
import ChatDto from "../dtos/chat-dto";

class BotController {
  constructor() {
    this.setCommands();
  }

  async setCommands() {
    bot.setMyCommands([
      { command: "/legend", description: "‚ÑπÔ∏è –õ–µ–≥–µ–Ω–¥–∞" },
      { command: "/air", description: "‚úà –¢—ñ–ª—å–∫–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏" },
      { command: "/all", description: "‚ö†Ô∏è –í—Å—ñ –≤–∏–¥–∏ —Ç—Ä–∏–≤–æ–≥" },
      { command: "/subscribe", description: "üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
      { command: "/unsubscribe", description: "üîï –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" },
      { command: "/mute", description: "üîá –ë–µ–∑ –∑–≤—É–∫—É" },
      { command: "/unmute", description: "üîà –ó—ñ –∑–≤—É–∫–æ–º" },
      { command: "/help", description: "üìÑ –î–æ–ø–æ–º–æ–≥–∞" },
    ]);
  }

  setReplyKeyboard(chat: ChatDto): SendMessageOptions {
    const { subscribed, silent, alerts } = chat;

    const keyboard: KeyboardButton[][] = [];

    keyboard.push([
      {
        text: "‚ÑπÔ∏è",
      },
      {
        text: subscribed ? "üîï" : "üîî",
      },
      {
        text: silent ? "üîà" : "üîá",
      },
      {
        text: alerts === "air" ? "‚ö†Ô∏è" : "‚úà",
      },
    ]);

    return {
      reply_markup: {
        resize_keyboard: true,
        keyboard,
      },
    };
  }

  async sendError(chatId: number) {
    await bot.sendMessage(chatId, `–ü–æ–º–∏–ª–æ—á–∫–∞  ¬Ø\\_(„ÉÑ)_/¬Ø`);
  }

  async onHelp(chatId: number) {
    return await bot.sendMessage(
      chatId,
      `–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–æ–≤—É –º–∞–ø—É, –∫–æ–ª–∏ –Ω–∞ –Ω—ñ–π –±—É–¥—É—Ç—å –∑–º—ñ–Ω–∏.\n\n–û—Å—å, —â–æ –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏ –∑—Ä–æ–±–∏—Ç–∏:\n\n/legend - ‚ÑπÔ∏è –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ª–µ–≥–µ–Ω–¥—É –º–∞–ø—ã.\n\n/air - ‚úà –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ *–ø–æ–≤—ñ—Ç—Ä—è–Ω–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏*.\n/all - ‚ö†Ô∏è –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ (–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞, –∞—Ä—Ç–∏–ª–µ—Ä—ñ—è —Ç–∞ —ñ–Ω—à–µ).\n\n/unsubscribe - üîï *–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è* –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å –º–∞–ø–∏.\n/subscribe - üîî *–≤—ñ–¥–Ω–æ–≤–∏—Ç–∏* –ø—ñ–¥–ø–∏—Å–∫—É.\n\n/mute - üîá –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è *–±–µ–∑ –∑–≤—É–∫—É*.\n/unmute - üîà —Ç–∞ *–∑—ñ –∑–≤—É–∫–æ–º*.`,
      {
        parse_mode: "Markdown",
      },
    );
  }

  async getAlertsScreenshot() {
    const url = "https://alerts.in.ua/";
    const selector = ".alert-map.map-container.no-select>svg>g[fill='none']";

    return await PuppeteerService.getSelectorScreenshot(url, selector, () => {
      localStorage.setItem("darkMode", "true");
      localStorage.setItem("showDurationGradient", "false");
      localStorage.setItem("showOblastLabels", "true");
      localStorage.setItem("offlineWarning", "false");
      localStorage.setItem("showRaion", "null");
    });
  }

  async onStart(msg: Message) {
    const {
      chat: { id: chatId },
      from,
    } = msg;

    this.setCommands();

    try {
      const chat = await db.addChat(chatId, from);

      await bot.sendMessage(
        chatId,
        `–í—ñ—Ç–∞—é, –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω—è –º–∞–ø–∏ —Ç—Ä–∏–≤–æ–≥ –£–∫—Ä–∞—ó–Ω–∏ (https://alerts.in.ua/).\n\n–¶–µ–π –±–æ—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –∑–º—ñ–Ω–∏ –Ω–∞ –º–∞–ø—ñ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —ó—ó, —è–∫—â–æ —â–æ—Å—å –∑–º—ñ–Ω–∏–ª–æ—Å—å.\n\n–ö—Ä–∞—â–µ –≤–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å 1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å. (–Ω–∞–≤—ñ—â–æ –í–∞–º –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –º–∞–ø–∏)\n\n–û—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—î –º–∞–ø–∞ –∑–∞—Ä–∞–∑:`,
        {
          ...this.setReplyKeyboard(chat),
          disable_web_page_preview: true,
        },
      );

      await bot.sendPhoto(
        chatId,
        fs.readFileSync("base.png"),
        {},
        {
          filename: "mapScreenshot",
          contentType: "image/png",
        },
      );

      return;
    } catch (e) {
      try {
        await this.setCommands();
        let chat = await db.getChat(chatId);
        const { subscribed } = chat;
        if (subscribed) {
          await bot.sendMessage(
            chatId,
            `–í—ñ—Ç–∞—é, –æ—Å—å —è–∫ –≤–∏–≥–ª—è–¥–∞—î –º–∞–ø–∞ –∑–∞—Ä–∞–∑:`,
            this.setReplyKeyboard(chat),
          );
        } else {
          chat = await db.chatSubscribe(chatId, true);
          await bot.sendMessage(
            chatId,
            `–í–∏ –∑–Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ç—Ä–∏–≤–æ–∂–Ω—É –º–∞–ø—É. –ê –æ—Å—å —ñ –≤–æ–Ω–∞ –∑–∞—Ä–∞–∑:`,
            this.setReplyKeyboard(chat),
          );
        }

        await bot.sendPhoto(
          chatId,
          fs.readFileSync("base.png"),
          {},
          {
            filename: "mapScreenshot",
            contentType: "image/png",
          },
        );
      } catch (e) {
        await this.sendError(chatId);
      }
    }
  }

  async onLegend(msg: Message) {
    const {
      chat: { id: chatId },
    } = msg;

    const legend = fs.readFileSync("legend.jpeg");

    return await bot.sendPhoto(
      chatId,
      legend,
      {},
      {
        filename: "mapLegend",
        contentType: "image/jpeg",
      },
    );
  }

  async onSubscribe(msg: Message, subscribe: boolean) {
    const {
      chat: { id: chatId },
    } = msg;

    try {
      let chat = await db.getChat(chatId);

      if (chat.subscribed === subscribe) {
        return await bot.sendMessage(
          chatId,
          subscribe
            ? "üîî –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏."
            : "üîï –í–∏ –≤–∂–µ –≤—ñ–¥–ø–∏—Å–∞–Ω—ñ –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å",
          this.setReplyKeyboard(chat),
        );
      }

      chat = await db.chatSubscribe(chatId, subscribe);

      await bot.sendMessage(
        chatId,
        subscribe
          ? "üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏.\n–û—Å—å –≤–æ–Ω–∞ –∑–∞—Ä–∞–∑:"
          : `üîï –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω—å.`,
        this.setReplyKeyboard(chat),
      );

      if (subscribe) {
        await bot.sendPhoto(
          chatId,
          fs.readFileSync("base.png"),
          {},
          {
            filename: "mapScreenshot",
            contentType: "image/png",
          },
        );
      }

      return;
    } catch (e) {
      await this.sendError(chatId);
    }
  }

  async onMute(msg: Message, mute: boolean) {
    const {
      chat: { id: chatId },
    } = msg;

    try {
      let chat = await db.getChat(chatId);

      if (chat.silent === mute) {
        return await bot.sendMessage(
          chatId,
          mute
            ? "üîá –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∑ –∑–≤—É–∫—É"
            : "üîà –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑—ñ –∑–≤—É–∫–æ–º",
          this.setReplyKeyboard(chat),
        );
      }

      chat = await db.chatSilent(chatId, mute);

      await bot.sendMessage(
        chatId,
        mute
          ? "üîá –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –±–µ–∑ –∑–≤—É–∫—É."
          : "üîà –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º.",
        this.setReplyKeyboard(chat),
      );

      return;
    } catch (e) {
      await this.sendError(chatId);
    }
  }

  async onAirAlert(msg: Message) {
    const {
      chat: { id: chatId },
    } = msg;

    try {
      let chat = await db.getChat(chatId);

      if (chat.alerts === "air") {
        return await bot.sendMessage(
          chatId,
          "‚úà –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ (—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä).",
          this.setReplyKeyboard(chat),
        );
      }

      chat = await db.chatAlerts(chatId, "air");

      await bot.sendMessage(
        chatId,
        "‚úà –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–º—ñ–Ω–∏—Ç—å—Å—è –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ (—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä).",
        this.setReplyKeyboard(chat),
      );

      return;
    } catch (e) {
      await this.sendError(chatId);
    }
  }

  async onAllAlert(msg: Message) {
    const {
      chat: { id: chatId },
    } = msg;

    try {
      let chat = await db.getChat(chatId);

      if (chat.alerts === "all") {
        return await bot.sendMessage(
          chatId,
          "‚ö†Ô∏è –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ –Ω–∞ –±—É–¥—å-—è–∫—É –∑–º—ñ–Ω—É —Ç—Ä–∏–≤–æ–≥.",
          this.setReplyKeyboard(chat),
        );
      }

      chat = await db.chatAlerts(chatId, "all");

      await bot.sendMessage(
        chatId,
        "‚ö†Ô∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–ø–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –ø—Ä–∏ –±—É–¥—å-—è–∫—ñ–π –∑–º—ñ–Ω—ñ —Ç—Ä–∏–≤–æ–≥.",
        this.setReplyKeyboard(chat),
      );

      return;
    } catch (e) {
      await this.sendError(chatId);
    }
  }

  async onAction(msg: Message) {
    let {
      text,
      chat: { id: chatId },
    } = msg;

    try {
      await db.connect();
      switch (text) {
        //start bot
        case "/start":
          await this.onStart(msg);
          return;
        //show legend
        case "/legend":
        case "‚ÑπÔ∏è":
          await this.onLegend(msg);
          return;
        //show all alerts
        case "/all":
        case "‚ö†Ô∏è":
          await this.onAllAlert(msg);
          return;
        //show only air alert
        case "/air":
        case "‚úà":
          await this.onAirAlert(msg);
          return;
        //subscribe
        case "/subscribe":
        case "üîî":
          await this.onSubscribe(msg, true);
          return;
        //unsubscribe
        case "/unsubscribe":
        case "üîï":
          await this.onSubscribe(msg, false);
          return;
        //mute
        case "/mute":
        case "üîá":
          await this.onMute(msg, true);
          return;
        //unmute
        case "/unmute":
        case "üîà":
          await this.onMute(msg, false);
          return;
        default:
          //help
          await this.onHelp(chatId);
          return;
      }
    } catch (e) {
      this.sendError(chatId);
    }
  }

  async sendMap(map: Buffer, isAir: boolean) {
    fs.writeFileSync("base.png", map);

    try {
      await db.connect();
      try {
        const chats = await db.getChats({
          subscribed: true,
          ...(isAir ? {} : { alerts: "all" }),
        });

        if (!chats.length) {
          return;
        }

        await Promise.all(
          chats.map(async (chat) => {
            const { id, silent } = chat;
            try {
              await bot.sendPhoto(
                id,
                map,
                {
                  ...this.setReplyKeyboard(chat),
                  disable_notification: silent,
                },
                {
                  filename: "mapScreenshot",
                  contentType: "image/png",
                },
              );
              return;
            } catch (e) {
              // @ts-ignore
              if (e.response.body.error_code === 403) {
                await db.chatSubscribe(id, false);
              }
              return;
            }
          }),
        );
        console.log(
          (isAir ? "–∑–º—ñ–Ω–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏" : "–∑–º—ñ–Ω–∞ —ñ–Ω—à–∏—Ö —Ç—Ä–∏–≤–æ–≥") +
            " " +
            new Date(Date.now() + 120 * 60 * 1000).toLocaleString(),
        );
      } catch (e) {}
    } catch (e) {}
  }

  async monitor() {
    const newScreenshot = (await this.getAlertsScreenshot()) as Buffer;
    let airAlertMatch = false;

    if (newScreenshot) {
      try {
        const base = fs.readFileSync("base.png");

        const diffPixels = await PixelmatchService.diffImages(
          base,
          newScreenshot,
          {
            threshold: 0.1,
            // @ts-ignore
            onDiffPixel: (color1, color2) => {
              if (!airAlertMatch) {
                airAlertMatch = AlertsColorService.isAirAlert(color1, color2);
              }
            },
          },
        );

        console.log(`${diffPixels} pixels; ${new Date().toLocaleString()}`);

        if (diffPixels > 400) {
          this.sendMap(newScreenshot, airAlertMatch);
        }
      } catch (e) {
        this.sendMap(newScreenshot, airAlertMatch);
      }
    }
  }

  // async updateMessage() {
  // 	try {
  // 		await db.connect();
  // 		try {
  // 			const chats = await db.getChats({
  // 				subscribed: true,
  // 			});

  // 			if (!chats.length) {
  // 				return;
  // 			}

  // 			await Promise.all(
  // 				chats.map(async (chat) => {
  // 					const { id, silent } = chat;
  // 					try {
  // 						await bot.sendMessage(
  // 							id,
  // 							"–û–Ω–æ–≤–ª–µ–Ω–Ω—è:\n\n–ë–æ—Ç –Ω–∞–≤—á–∏–≤—Å—è –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É (—á–µ—Ä–≤–æ–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É) –≤—ñ–¥ —ñ–Ω—à–∏—Ö.\n\n–¢–µ–ø–µ—Ä –¥–æ–¥–∞—Ç–∫–æ–≤–æ –í–∏ –º–æ–∂–µ—Ç–µ:\n\n/air - ‚úà –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ *–ø–æ–≤—ñ—Ç—Ä—è–Ω–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏*.\n/all - ‚ö†Ô∏è –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ (–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞, –∞—Ä—Ç–∏–ª–µ—Ä—ñ—è —Ç–∞ —ñ–Ω—à–µ). - –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –í–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏, –±–æ—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å, —è–∫—â–æ –∑–º—ñ–Ω–∏—Ç—å—Å—è –∑–∞–≥—Ä–æ–∑–∞ –∞—Ä—Ç–æ–±—Å—Ç—Ä—ñ–ª—É.",
  // 							{ ...this.setReplyKeyboard(chat), parse_mode: "Markdown" },
  // 						);
  // 						return;
  // 					} catch (e) {}
  // 				}),
  // 			);
  // 		} catch (e) {}
  // 	} catch (e) {}
  // }
}

export default new BotController();
